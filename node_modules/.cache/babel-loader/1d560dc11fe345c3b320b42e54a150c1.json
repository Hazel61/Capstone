{"remainingRequest":"/Users/shani/Projects/wats4000/wats4000-final-project/node_modules/babel-loader/lib/index.js!/Users/shani/Projects/wats4000/wats4000-final-project/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/shani/Projects/wats4000/wats4000-final-project/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/shani/Projects/wats4000/wats4000-final-project/src/views/Charts.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/shani/Projects/wats4000/wats4000-final-project/src/views/Charts.vue","mtime":1560105569000},{"path":"/Users/shani/Projects/wats4000/wats4000-final-project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/shani/Projects/wats4000/wats4000-final-project/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/shani/Projects/wats4000/wats4000-final-project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/shani/Projects/wats4000/wats4000-final-project/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from 'axios';\nimport LineChart from '@/components/LineChart';\nexport default {\n  name: 'Seattle',\n\n  data() {\n    return {\n      chartdata: {\n        labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n        datasets: [{\n          label: 'High Temperature',\n          backgroundColor: '#f87979',\n          data: []\n        }, {\n          label: 'Low Temperature',\n          backgroundColor: 'blue',\n          data: []\n        }]\n      },\n      chartOptions: {},\n      results: null,\n      errors: [],\n      Months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    };\n  },\n\n  created() {\n    // High Temperature call\n    axios.get('https://www.ncdc.noaa.gov/cdo-web/api/v2/data', {\n      headers: {\n        token: 'AlOCstuxmDrmZEVMyzYRHkJtzIOjDLBD'\n      },\n      params: {\n        stationid: \"GHCND:USW00024233\",\n        units: \"standard\",\n        datatypeid: \"EMXT\",\n        limit: 100,\n        startdate: \"2018-01-01\",\n        enddate: \"2018-12-31\",\n        datasetid: \"GSOM\"\n      }\n    }).then(response => {\n      this.results = response.data.results;\n      let highTemperatures = this.chartdata.datasets.find(dataset => dataset.label === 'High Temperature');\n\n      if (highTemperatures) {\n        highTemperatures.data = this.results.map(result => result.value);\n      } else {\n        console.error('Could not find high temperature dataset.');\n      }\n    }).catch(error => {\n      this.errors.push(error);\n    }); // Low Temperature call\n\n    axios.get('https://www.ncdc.noaa.gov/cdo-web/api/v2/data', {\n      headers: {\n        token: 'AlOCstuxmDrmZEVMyzYRHkJtzIOjDLBD'\n      },\n      params: {\n        stationid: \"GHCND:USW00024233\",\n        units: \"standard\",\n        datatypeid: \"EMNT\",\n        limit: 100,\n        startdate: \"2018-01-01\",\n        enddate: \"2018-12-31\",\n        datasetid: \"GSOM\"\n      }\n    }).then(response => {\n      this.results = response.data.results;\n      let lowTemperatures = this.chartdata.datasets.find(dataset => dataset.label === 'Low Temperature');\n\n      if (lowTemperatures) {\n        lowTemperatures.data = this.results.map(result => result.value);\n      } else {\n        console.error('Could not find high temperature dataset.');\n      }\n    }).catch(error => {\n      this.errors.push(error);\n    });\n  },\n\n  components: {\n    // 'error-list': ErrorList,\n    'line-chart': LineChart\n  }\n};",{"version":3,"sources":["Charts.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div>\n        <p>\n            High and low temperatures for 2018\n        </p>\n        <p>\n            <line-chart :options=\"chartOptions\" :chartdata=\"chartdata\"/>\n        </p>\n    </div>\n</template>\n\n<script>\n    import axios from 'axios';\n    import LineChart from '@/components/LineChart';\n\n    export default {\n        name: 'Seattle',\n        data() {\n            return {\n                chartdata: {\n                    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n                    datasets: [\n                        {\n                            label: 'High Temperature',\n                            backgroundColor: '#f87979',\n                            data: []\n                        },\n                        {\n                            label: 'Low Temperature',\n                            backgroundColor: 'blue',\n                            data: [],\n                        }\n                    ]\n                },\n                chartOptions: {\n\n                },\n                results: null,\n                errors: [],\n                Months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n            }\n        },\n\n        created() {\n            // High Temperature call\n            axios.get('https://www.ncdc.noaa.gov/cdo-web/api/v2/data', {\n                headers: {\n                    token: 'AlOCstuxmDrmZEVMyzYRHkJtzIOjDLBD',\n                },\n                params: {\n                    stationid: \"GHCND:USW00024233\",\n                    units: \"standard\",\n                    datatypeid: \"EMXT\",\n                    limit: 100,\n                    startdate: \"2018-01-01\",\n                    enddate: \"2018-12-31\",\n                    datasetid: \"GSOM\"\n                }\n            })\n                .then(response => {\n                    this.results = response.data.results;\n                    let highTemperatures = this.chartdata.datasets.find(dataset => dataset.label === 'High Temperature');\n                    if (highTemperatures) {\n                        highTemperatures.data = this.results.map(result => result.value);\n\n                    } else {\n                        console.error('Could not find high temperature dataset.');\n                    }\n                })\n                .catch(error => {\n                    this.errors.push(error)\n                });\n\n            // Low Temperature call\n            axios.get('https://www.ncdc.noaa.gov/cdo-web/api/v2/data', {\n                headers: {\n                    token: 'AlOCstuxmDrmZEVMyzYRHkJtzIOjDLBD',\n                },\n                params: {\n                    stationid: \"GHCND:USW00024233\",\n                    units: \"standard\",\n                    datatypeid: \"EMNT\",\n                    limit: 100,\n                    startdate: \"2018-01-01\",\n                    enddate: \"2018-12-31\",\n                    datasetid: \"GSOM\"\n                }\n            })\n                .then(response => {\n                    this.results = response.data.results;\n                    let lowTemperatures = this.chartdata.datasets.find(dataset => dataset.label === 'Low Temperature');\n                    if (lowTemperatures) {\n                        lowTemperatures.data = this.results.map(result => result.value);\n\n                    } else {\n                        console.error('Could not find high temperature dataset.');\n                    }\n                })\n                .catch(error => {\n                    this.errors.push(error)\n                });\n        },\n        components: {\n            // 'error-list': ErrorList,\n            'line-chart': LineChart\n        }\n    }\n</script>\n\n<style scoped>\n\n</style>"],"sourceRoot":"src/views"}]}