{"remainingRequest":"/Users/shani/Projects/wats4000/wats4000-refactoring/node_modules/thread-loader/dist/cjs.js!/Users/shani/Projects/wats4000/wats4000-refactoring/node_modules/babel-loader/lib/index.js!/Users/shani/Projects/wats4000/wats4000-refactoring/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/shani/Projects/wats4000/wats4000-refactoring/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/shani/Projects/wats4000/wats4000-refactoring/src/views/Forecast.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/shani/Projects/wats4000/wats4000-refactoring/src/views/Forecast.vue","mtime":1557462331000},{"path":"/Users/shani/Projects/wats4000/wats4000-refactoring/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/shani/Projects/wats4000/wats4000-refactoring/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/shani/Projects/wats4000/wats4000-refactoring/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/shani/Projects/wats4000/wats4000-refactoring/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/shani/Projects/wats4000/wats4000-refactoring/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from 'axios';\nimport { API } from '@/common/api';\nexport default {\n  name: 'Forecast',\n\n  data() {\n    return {\n      weatherData: null,\n      errors: [],\n      query: ''\n    };\n  },\n\n  created() {\n    API.get('forecast', {\n      params: {\n        id: this.$route.params.cityId\n      }\n    }).then(response => {\n      this.weatherData = response.data;\n    }).catch(error => {\n      this.errors.push(error);\n    });\n  },\n\n  filters: {\n    formatDate: function (timestamp) {\n      let date = new Date(timestamp * 1000);\n      const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n      const weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']; //let weekday = date.getDay();\n\n      let daynum = date.getDate();\n      let month = date.getMonth();\n      let hour = date.getHours();\n\n      if (hour === 12) {\n        hour = 'Noon';\n      } else if (hour === 0) {\n        hour = 'Midnight';\n      } else if (hour > 12) {\n        hour = hour - 12 + 'PM';\n      } else if (hour < 12) {\n        hour = hour + 'AM';\n      } //let year = date.getFullYear();\n\n\n      return `${months[month]} ${daynum} @ ${hour}`;\n    }\n  }\n};",{"version":3,"sources":["Forecast.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA,OAAA,KAAA,MAAA,OAAA;AACA,SAAA,GAAA,QAAA,cAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,UADA;;AAEA,EAAA,IAAA,GAAA;AACA,WAAA;AACA,MAAA,WAAA,EAAA,IADA;AAEA,MAAA,MAAA,EAAA,EAFA;AAGA,MAAA,KAAA,EAAA;AAHA,KAAA;AAKA,GARA;;AASA,EAAA,OAAA,GAAA;AACA,IAAA,GAAA,CAAA,GAAA,CAAA,UAAA,EAAA;AACA,MAAA,MAAA,EAAA;AACA,QAAA,EAAA,EAAA,KAAA,MAAA,CAAA,MAAA,CAAA;AADA;AADA,KAAA,EAKA,IALA,CAKA,QAAA,IAAA;AACA,WAAA,WAAA,GAAA,QAAA,CAAA,IAAA;AACA,KAPA,EAQA,KARA,CAQA,KAAA,IAAA;AACA,WAAA,MAAA,CAAA,IAAA,CAAA,KAAA;AACA,KAVA;AAWA,GArBA;;AAsBA,EAAA,OAAA,EAAA;AACA,IAAA,UAAA,EAAA,UAAA,SAAA,EAAA;AACA,UAAA,IAAA,GAAA,IAAA,IAAA,CAAA,SAAA,GAAA,IAAA,CAAA;AACA,YAAA,MAAA,GAAA,CAAA,SAAA,EAAA,UAAA,EAAA,OAAA,EAAA,OAAA,EAAA,KAAA,EAAA,MAAA,EAAA,MAAA,EAAA,QAAA,EAAA,WAAA,EAAA,SAAA,EAAA,UAAA,EAAA,UAAA,CAAA;AACA,YAAA,QAAA,GAAA,CAAA,QAAA,EAAA,QAAA,EAAA,SAAA,EAAA,WAAA,EAAA,UAAA,EAAA,QAAA,EAAA,UAAA,CAAA,CAHA,CAIA;;AACA,UAAA,MAAA,GAAA,IAAA,CAAA,OAAA,EAAA;AACA,UAAA,KAAA,GAAA,IAAA,CAAA,QAAA,EAAA;AAEA,UAAA,IAAA,GAAA,IAAA,CAAA,QAAA,EAAA;;AACA,UAAA,IAAA,KAAA,EAAA,EAAA;AACA,QAAA,IAAA,GAAA,MAAA;AACA,OAFA,MAEA,IAAA,IAAA,KAAA,CAAA,EAAA;AACA,QAAA,IAAA,GAAA,UAAA;AACA,OAFA,MAEA,IAAA,IAAA,GAAA,EAAA,EAAA;AACA,QAAA,IAAA,GAAA,IAAA,GAAA,EAAA,GAAA,IAAA;AACA,OAFA,MAEA,IAAA,IAAA,GAAA,EAAA,EAAA;AACA,QAAA,IAAA,GAAA,IAAA,GAAA,IAAA;AACA,OAjBA,CAkBA;;;AACA,aAAA,GAAA,MAAA,CAAA,KAAA,CAAA,IAAA,MAAA,MAAA,IAAA,EAAA;AACA;AArBA;AAtBA,CAAA","sourcesContent":["<template>\n  <div>\n    <h2>Five Day Hourly Forecast <span v-if=\"weatherData\"> for {{ weatherData.city.name }}, {{weatherData.city.country }}</span></h2>\n    <p>\n      <router-link to=\"/\">Home</router-link> |\n      <router-link v-bind:to=\"{ name: 'CurrentWeather', params: { cityId: $route.params.cityId } }\">Current Weather <span v-if=\"weatherData\"> for {{ weatherData.city.name }}, {{weatherData.city.country }}</span></router-link>\n    </p>\n\n    <ul v-if=\"weatherData && errors.length===0\" class=\"forecast\">\n      <li v-for=\"(forecast,index) in weatherData.list\" :key=\"index\">\n        <h3>{{ forecast.dt|formatDate }}</h3>\n        <!-- TODO: Make weather summary be in a child component. -->\n        <div v-for=\"(weatherSummary,index) in forecast.weather\" :key=\"index\" class=\"weatherSummary\">\n            <img v-bind:src=\"'http://openweathermap.org/img/w/' + weatherSummary.icon + '.png'\" v-bind:alt=\"weatherSummary.main\">\n            <br>\n            <b>{{ weatherSummary.main }}</b>\n        </div>\n        <!-- TODO: Make dl of weather data be in a child component. -->\n        <dl>\n            <dt>Humidity</dt>\n            <dd>{{ forecast.main.humidity }}%</dd>\n            <dt>High</dt>\n            <dd>{{ forecast.main.temp_max }}&deg;F</dd>\n            <dt>Low</dt>\n            <dd>{{ forecast.main.temp_min }}&deg;F</dd>\n        </dl>\n      </li>\n    </ul>\n    <div v-else-if=\"errors.length > 0\">\n      <h2>There was an error fetching weather data.</h2>\n      <ul class=\"errors\">\n        <li v-for=\"(error,index) in errors\" :key=\"index\">{{ error }}</li>\n      </ul>\n    </div>\n    <div v-else>\n      <h2>Loading...</h2>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport {API} from '@/common/api';\n\nexport default {\n  name: 'Forecast',\n  data () {\n    return {\n      weatherData: null,\n      errors: [],\n      query: ''\n    }\n  },\n  created () {\n      API.get('forecast', {\n        params: {\n            id: this.$route.params.cityId,\n        }\n      })\n    .then(response => {\n      this.weatherData = response.data\n    })\n    .catch(error => {\n      this.errors.push(error)\n    });\n  },\n  filters: {\n    formatDate: function (timestamp){\n      let date = new Date(timestamp * 1000);\n      const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n      const weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n      //let weekday = date.getDay();\n      let daynum = date.getDate();\n      let month = date.getMonth();\n\n      let hour = date.getHours();\n      if (hour === 12) {\n        hour = 'Noon';\n      } else if (hour === 0) {\n        hour = 'Midnight';\n      } else if (hour > 12) {\n        hour = hour - 12 + 'PM';\n      } else if (hour < 12) {\n        hour = hour + 'AM';\n      }\n      //let year = date.getFullYear();\n      return `${ months[month] } ${ daynum } @ ${ hour }`;\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.errors li {\n  color: red;\n  border: solid red 1px;\n  padding: 5px;\n}\nh1, h2 {\n  font-weight: normal;\n}\n\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  width: 200px;\n  min-height: 300px;\n  border: solid 1px #e8e8e8;\n  padding: 10px;\n  margin: 5px;\n}\n\na {\n  color: #42b983;\n}\n.weatherSummary {\n  display: inline-block;\n  width: 100px;\n}\ndl {\n  padding: 5px;\n  background: #e8e8e8;\n}\ndt {\n  float: left;\n  clear: left;\n  width: 120px;\n  text-align: right;\n  font-weight: bold;\n  color: blue;\n}\ndd {\n  margin: 0 0 0 130px;\n  padding: 0 0 0.5em 0;\n}\ndt::after {\n  content: \":\";\n}\n</style>\n\n\n"],"sourceRoot":"src/views"}]}