{"version":3,"sources":["webpack:///src/src/App.vue","app.31bf502f.css","webpack:///src/components/src/components/WeatherSummary.vue","webpack:///src/components/src/components/WeatherConditions.vue","webpack:///src/views/src/views/Forecast.vue","webpack:///src/views/src/views/CitySearch.vue","webpack:///src/views/src/views/CurrentWeather.vue","webpack:///src/views/src/views/Seattle.vue"],"names":[],"mappings":"AAiCA,QAAA,sFAAA,CAAA,uDAAA,CACA,KAEA,6CAAA,CACA,kCAAA,CACA,iCAAA,CACA,aAAA,CACA,eAAA,CACA,YC/BA,CDkCA,KACA,kBAAA,CACA,SAAA,CACA,QChCA,CDkCA,KACA,SAAA,CACA,aAAA,CACA,SChCA,CDoCA,QACA,qBAAA,CACA,eAAA,CACA,YCjCA,CDqCA,UACA,WAAA,CACA,aAAA,CACA,aAAA,CACA,iBAAA,CACA,iBAAA,CACA,oBAAA,CACA,cCjCA,CDqCA,gBACA,qBAAA,CACA,UCjCA,CDqCA,iBACA,wBAAA,CACA,UCjCA,CDqCA,cACA,YCjCA,CDoCA,oCACA,4BAAA,YAAA,CACA,eACA,WAAA,CACA,aCjCA,CACA,CDqCA,oCACA,mBAAA,iBAAA,CACA,0BACA,iBAAA,CACA,OAAA,CACA,KCjCA,CDmCA,qBACA,UAAA,CACA,aAAA,CACA,eCjCA,CACA,CCrDA,iCACA,oBAAA,CACA,WDyDA,CElDA,oBACA,WAAA,CACA,eFsDA,CEpDA,oBACA,UAAA,CACA,UAAA,CACA,WAAA,CACA,gBAAA,CACA,eAAA,CACA,UAAA,CACA,WFsDA,CEpDA,oBACA,cAAA,CACA,kBFsDA,CEpDA,0BACA,WFsDA,CGzBA,wDACA,SAAA,CACA,oBAAA,CACA,WHoCA,CGlCA,wCACA,eHoCA,CGjCA,oBACA,oBAAA,CACA,SHmCA,CGjCA,oBACA,oBAAA,CACA,WAAA,CACA,gBAAA,CACA,wBAAA,CACA,YAAA,CACA,UHmCA,CGhCA,mBACA,aHkCA,CGhCA,iCACA,oBAAA,CACA,WHkCA,CInEA,oBACA,UJuEA,CIrEA,4BACA,SAAA,CACA,oBAAA,CACA,WJuEA,CIpEA,wCACA,eJsEA,CInEA,oBACA,oBAAA,CACA,SJqEA,CIlEA,oBAAA,wBAAA,CACA,oBAAA,CACA,WAAA,CACA,gBAAA,CACA,wBAAA,CACA,YAAA,CACA,UJoEA,CIlEA,8BACA,SJoEA,CIlEA,iCACA,oBAAA,CACA,WJoEA,CIjEA,mBACA,aJmEA,CK1HA,4BACA,SAAA,CACA,oBAAA,CACA,WL8HA,CK5HA,wCACA,eL8HA,CK3HA,oBACA,oBAAA,CACA,SL6HA,CK3HA,oBACA,oBAAA,CACA,WAAA,CACA,gBAAA,CACA,wBAAA,CACA,YL6HA,CK3HA,iCACA,oBAAA,CACA,WL6HA,CK1HA,mBACA,aL4HA,CMnGA,4BACA,SAAA,CACA,oBAAA,CACA,WNuGA,CMpGA,wCACA,eAAA,CACA,gBNsGA,CMnGA,oBACA,oBAAA,CACA,SNqGA,CMlGA,oBACA,oBAAA,CACA,wBAAA,CACA,WAAA,CACA,gBAAA,CACA,wBAAA,CACA,YAAA,CACA,UNoGA,CMjGA,mBACA,aNmGA","file":"app.31bf502f.css","sourcesContent":["<template>\n  <div id=\"app\">\n    <div class=\"topnav\" id=\"myTopnav\">\n      <a href=\"#home\" class=\"active\">Home</a>\n      <a href=\"#videos\">News</a>\n      <a href=\"#contact\">Contact</a>\n      <a href=\"#about\">About</a>\n      <a href=\"javascript:void(0);\" class=\"icon\" onclick=\"myFunction()\">\n        <i class=\"fa fa-bars\"></i>\n      </a>\n    </div>\n    <h1>Climate Change in Seattle</h1>\n    <div id=\"home\"></div>\n    <router-view/>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'app'\n}\n/* Toggle between adding and removing the \"responsive\" class to topnav when the user clicks on the icon */\nfunction myFunction() {\n    var x = document.getElementById(\"myTopnav\");\n    if (x.className === \"topnav\") {\n        x.className += \" responsive\";\n    } else {\n        x.className = \"topnav\";\n    }\n}\n</script>\n\n<style>\n  .topnav {background-image: linear-gradient(to right, #328CC1, #0B3C5D);}\n#app {\n\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  color: #0B3C5D;\n  margin-top: 20px;\n  padding: 20px;\n\n}\nhtml {\n  background: #D9D9D9;\n  padding: 0;\n  margin: 0;\n}\nbody {\n  width: 98%;\n  margin: 0 auto;\n  padding: 0;\n\n}\n/* Add a black background color to the top navigation */\n.topnav {\n  background-color: #333;\n  overflow: hidden;\n  padding: 50px;\n}\n\n/* Style the links inside the navigation bar */\n.topnav a {\n  float: right;\n  display: block;\n  color: #f2f2f2;\n  text-align: center;\n  padding: 14px 16px;\n  text-decoration: none;\n  font-size: 17px;\n}\n\n/* Change the color of links on hover */\n.topnav a:hover {\n  background-color: #ddd;\n  color: black;\n}\n\n/* Add an active class to highlight the current page */\n.topnav a.active {\n  background-color: #4CAF50;\n  color: white;\n}\n\n/* Hide the link that should open and close the topnav on small screens */\n.topnav .icon {\n  display: none;\n}\n/* When the screen is less than 600 pixels wide, hide all links, except for the first one (\"Home\"). Show the link that contains should open and close the topnav (.icon) */\n@media screen and (max-width: 600px) {\n  .topnav a:not(:first-child) {display: none;}\n  .topnav a.icon {\n    float: right;\n    display: block;\n  }\n}\n\n/* The \"responsive\" class is added to the topnav with JavaScript when the user clicks on the icon. This class makes the topnav look good on small screens (display the links vertically instead of horizontally) */\n@media screen and (max-width: 600px) {\n  .topnav.responsive {position: relative;}\n  .topnav.responsive a.icon {\n    position: absolute;\n    right: 0;\n    top: 0;\n  }\n  .topnav.responsive a {\n    float: none;\n    display: block;\n    text-align: left;\n  }\n}\n</style>\n","\n.topnav {background-image: -webkit-gradient(linear, left top, right top, from(#328CC1), to(#0B3C5D));background-image: linear-gradient(to right, #328CC1, #0B3C5D);}\n#app {\n\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  color: #0B3C5D;\n  margin-top: 20px;\n  padding: 20px;\n}\nhtml {\n  background: #D9D9D9;\n  padding: 0;\n  margin: 0;\n}\nbody {\n  width: 98%;\n  margin: 0 auto;\n  padding: 0;\n}\n/* Add a black background color to the top navigation */\n.topnav {\n  background-color: #333;\n  overflow: hidden;\n  padding: 50px;\n}\n\n/* Style the links inside the navigation bar */\n.topnav a {\n  float: right;\n  display: block;\n  color: #f2f2f2;\n  text-align: center;\n  padding: 14px 16px;\n  text-decoration: none;\n  font-size: 17px;\n}\n\n/* Change the color of links on hover */\n.topnav a:hover {\n  background-color: #ddd;\n  color: black;\n}\n\n/* Add an active class to highlight the current page */\n.topnav a.active {\n  background-color: #4CAF50;\n  color: white;\n}\n\n/* Hide the link that should open and close the topnav on small screens */\n.topnav .icon {\n  display: none;\n}\n/* When the screen is less than 600 pixels wide, hide all links, except for the first one (\"Home\"). Show the link that contains should open and close the topnav (.icon) */\n@media screen and (max-width: 600px) {\n.topnav a:not(:first-child) {display: none;}\n.topnav a.icon {\n    float: right;\n    display: block;\n}\n}\n\n/* The \"responsive\" class is added to the topnav with JavaScript when the user clicks on the icon. This class makes the topnav look good on small screens (display the links vertically instead of horizontally) */\n@media screen and (max-width: 600px) {\n.topnav.responsive {position: relative;}\n.topnav.responsive a.icon {\n    position: absolute;\n    right: 0;\n    top: 0;\n}\n.topnav.responsive a {\n    float: none;\n    display: block;\n    text-align: left;\n}\n}\n\n\n.weatherSummary[data-v-59b69fe0] {\n  display: inline-block;\n  width: 100px;\n}\n\n\ndl[data-v-244d4f3f] {\n  padding: 5px;\n  background: white;\n}\ndt[data-v-244d4f3f] {\n  float: left;\n  clear: left;\n  width: 120px;\n  text-align: right;\n  font-weight: bold;\n  color: blue;\n  padding: 5px;\n}\ndd[data-v-244d4f3f] {\n  margin-top: 5px;\n  padding: 0 0 0.5em 0;\n}\ndt[data-v-244d4f3f]::after {\n  content: \":\";\n}\n\n\n.errors li[data-v-185c91aa] {\n  color: red;\n  border: solid red 1px;\n  padding: 5px;\n}\n\n\n.errors li[data-v-45f344f8] {\n  color: red;\n  border: solid red 1px;\n  padding: 5px;\n}\nh1[data-v-45f344f8], h2[data-v-45f344f8] {\n  font-weight: normal;\n}\nul[data-v-45f344f8] {\n  list-style-type: none;\n  padding: 0;\n}\nli[data-v-45f344f8] {\n  display: inline-block;\n  width: 200px;\n  min-height: 300px;\n  border: solid 1px #e8e8e8;\n  padding: 10px;\n  margin: 5px;\n}\na[data-v-45f344f8] {\n  color: #42b983;\n}\n.weatherSummary[data-v-45f344f8] {\n  display: inline-block;\n  width: 100px;\n}\n\n\nh2[data-v-e78b58b2] {\n    color: blue;\n}\n.errors li[data-v-e78b58b2] {\n    color: red;\n    border: solid red 1px;\n    padding: 5px;\n}\nh1[data-v-e78b58b2], h2[data-v-e78b58b2] {\n    font-weight: normal;\n}\nul[data-v-e78b58b2] {\n    list-style-type: none;\n    padding: 0;\n}\nli[data-v-e78b58b2] {background-color: #328CC1;\n    display: inline-block;\n    width: 300px;\n    min-height: 300px;\n    border: solid 1px #e8e8e8;\n    padding: 10px;\n    margin: 5px;\n}\n.rlink-style[data-v-e78b58b2] {\n    color: red\n}\n.weatherSummary[data-v-e78b58b2] {\n    display: inline-block;\n    width: 100px;\n}\na[data-v-e78b58b2] {\n    color: #42b983;\n}\n\n\n.errors li[data-v-beb4c0f4] {\n  color: red;\n  border: solid red 1px;\n  padding: 5px;\n}\nh1[data-v-beb4c0f4], h2[data-v-beb4c0f4] {\n  font-weight: normal;\n}\nul[data-v-beb4c0f4] {\n  list-style-type: none;\n  padding: 0;\n}\nli[data-v-beb4c0f4] {\n  display: inline-block;\n  width: 300px;\n  min-height: 300px;\n  border: solid 1px #e8e8e8;\n  padding: 10px;\n}\n.weatherSummary[data-v-beb4c0f4] {\n  display: inline-block;\n  width: 100px;\n}\na[data-v-beb4c0f4] {\n  color: #42b983;\n}\n\n\n.errors li[data-v-f6257da0] {\n    color: red;\n    border: solid red 1px;\n    padding: 5px;\n}\nh1[data-v-f6257da0], h2[data-v-f6257da0] {\n    font-weight: normal;\n    font-size: medium;\n}\nul[data-v-f6257da0] {\n    list-style-type: none;\n    padding: 0;\n}\nli[data-v-f6257da0] {\n    display: inline-block;\n    background-color: lightblue;\n    width: 200px;\n    min-height: 200px;\n    border: solid 1px #e8e8e8;\n    padding: 10px;\n    margin: 5px;\n}\na[data-v-f6257da0] {\n    color: #42b983;\n}\n\n\n/*# sourceMappingURL=app.31bf502f.css.map*/","<template>\n  <div>\n    <div v-for=\"weatherSummary in weatherData\" class=\"weatherSummary\" :key=\"weatherSummary.id\">\n      <img v-bind:src=\"'http://openweathermap.org/img/w/' + weatherSummary.icon + '.png'\" v-bind:alt=\"weatherSummary.main\">\n      <br>\n      <b>{{ weatherSummary.main }}</b>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'WeatherSummary',\n  data () {\n    return {\n    }\n  },\n  props: {\n    weatherData: {}\n  }\n}\n</script>\n\n<style scoped>\n  .weatherSummary {\n    display: inline-block;\n    width: 100px;\n  }\n</style>","<template>\n  <div>\n    <dl>\n       <dt>Current Temp</dt>\n       <dd>{{ conditions.temp }}&deg;F</dd>\n      <dt>High</dt>\n      <dd>{{ conditions.temp_max }}&deg;F</dd>\n      <dt>Low </dt>\n      <dd>{{ conditions.temp_min }}&deg;F</dd>\n      <dt>Humidity </dt>\n      <dd>{{ conditions.humidity }}%</dd>\n      <dt>Pressure</dt>\n      <dd>{{conditions.pressure}}</dd>\n\n    </dl>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'WeatherConditions',\n  data () {\n    return {\n\n    }\n  },\n  props: {\n    conditions: {}\n  }\n}\n</script>\n\n<style scoped>\n  dl {\n    padding: 5px;\n    background: white;\n  }\n  dt {\n    float: left;\n    clear: left;\n    width: 120px;\n    text-align: right;\n    font-weight: bold;\n    color: blue;\n    padding: 5px;\n  }\n  dd {\n    margin-top: 5px;\n    padding: 0 0 0.5em 0;\n  }\n  dt::after {\n    content: \":\";\n  }\n</style>","<template>\n  <div>\n    <h2>Five Day Hourly Forecast <span v-if=\"weatherData\"> for {{ weatherData.city.name }}, {{weatherData.city.country }}</span></h2>\n    <p>\n      <router-link to=\"/\">Home</router-link> |\n      <router-link v-bind:to=\"{ name: 'CurrentWeather', params: { cityId: $route.params.cityId } }\">Current Weather <span v-if=\"weatherData\"> for {{ weatherData.city.name }}, {{weatherData.city.country }}</span></router-link>\n    </p>\n    <ul v-if=\"weatherData && errors.length===0\" class=\"forecast\">\n      <li v-for=\"(forecast,index) in weatherData.list\" :key=\"index\">\n        <h3>{{ forecast.dt|formatDate }}</h3>\n        <weather-summary v-bind:weatherData=\"forecast.weather\"></weather-summary>\n        <weather-conditions v-bind:conditions=\"forecast.main\"></weather-conditions>\n      </li>\n    </ul>\n    <error-list v-bind:errorList=\"errors\"></error-list>\n  </div>\n</template>\n\n<script>\n\nimport {API} from '@/common/api';\nimport WeatherSummary from '@/components/WeatherSummary';\nimport WeatherConditions from '@/components/WeatherConditions';\nimport ErrorList from '@/components/ErrorList';\n\nexport default {\n  name: 'Forecast',\n  data () {\n    return {\n      weatherData: null,\n      errors: [],\n      query: ''\n    }\n  },\n  created () {\n      API.get('forecast', {\n        params: {\n            id: this.$route.params.cityId,\n        }\n      })\n    .then(response => {\n      this.weatherData = response.data\n    })\n    .catch(error => {\n      this.errors.push(error)\n    });\n\n  },\n  filters: {\n    formatDate: function (timestamp){\n      let date = new Date(timestamp * 1000);\n      const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n      const weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n      //let weekday = date.getDay();\n      let daynum = date.getDate();\n      let month = date.getMonth();\n      let hour = date.getHours();\n      if (hour === 12) {\n        hour = 'Noon';\n      } else if (hour === 0) {\n        hour = 'Midnight';\n      } else if (hour > 12) {\n        hour = hour - 12 + 'PM';\n      } else if (hour < 12) {\n        hour = hour + 'AM';\n      }\n      //let year = date.getFullYear();\n      return `${ months[month] } ${ daynum } @ ${ hour }`;\n    }\n  },\n  components: {\n    'weather-summary': WeatherSummary,\n    'weather-conditions': WeatherConditions,\n    'error-list': ErrorList\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.errors li {\n  color: red;\n  border: solid red 1px;\n  padding: 5px;\n}\nh1, h2 {\n  font-weight: normal;\n}\n\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  width: 200px;\n  min-height: 300px;\n  border: solid 1px #e8e8e8;\n  padding: 10px;\n  margin: 5px;\n}\n\na {\n  color: #42b983;\n}\n.weatherSummary {\n  display: inline-block;\n  width: 100px;\n}\n</style>\n\n\n","<template>\n    <div class=\"top-color\">\n\n            <img src=\"../assets/storm-clouds.jpeg\" alt=\"An image of a storm cloud\">\n\n        <h2>Welcome to my Seattle temperature tracker.</h2>\n\n        <p>\n            <button v-on:click=\"getCities\" type=\"submit\">Current Weather</button>\n        </p>\n\n        <ul class=\"cities\" v-if=\"results && results.list.length > 0\">\n            <li v-for=\"(city,index) in results.list\" :key=\"index\">\n                <h2>{{ city.name }}, {{ city.sys.country }}</h2>\n\n                <weather-summary v-bind:weatherData=\"city.weather\"></weather-summary>\n                <weather-conditions v-bind:conditions=\"city.main\"></weather-conditions>\n            </li>\n        </ul>\n\n        <p>I have lived in Seattle for most of my life, and I know the city is warming up. For my final project in Seattlle University's Wats 4000 course, I thought it would be interesting to dive into NOAA's and Open Weather Map's API's and look at some historical data on Seattle. I am using Vue and Vue-chartsjs under the hood. Click below to see the current conditions.</p>\n            <img src=\"../assets/raven1.jpeg\" alt=\"A watercolor of a raven\">\n\n            <p>\n                <router-link class=\"link-style\" v-bind:to=\"{name:'Seattle'}\">Example Historical Data</router-link>\n            </p>\n\n        <error-list v-bind:errorList=\"errors\"></error-list>\n    </div>\n</template>\n\n<script>\n    import {API} from '@/common/api';\n    // import {API} from '@/common/api2'\n    import ErrorList from '@/components/ErrorList';\n    import WeatherSummary from '@/components/WeatherSummary';\n    import WeatherConditions from '@/components/WeatherConditions';\n\n\n    export default {\n        name: 'CitySearch',\n        data() {\n            return {\n                results: null,\n                errors: [],\n                query: 'Seattle'\n            }\n        },\n        methods: {\n            getCities: function () {\n                API.get('find', {\n                    params: {\n                        q: this.query\n                    }\n                })\n                .then(response => {\n                    this.results = response.data\n                })\n                .catch(error => {\n                    this.errors.push(error)\n                });\n            }\n        },\n        components: {\n            'weather-summary': WeatherSummary,\n            'weather-conditions': WeatherConditions,\n            'error-list': ErrorList\n        }\n    }\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n\n    h2 {\n        color: blue;\n    }\n    .errors li {\n        color: red;\n        border: solid red 1px;\n        padding: 5px;\n    }\n\n    h1, h2 {\n        font-weight: normal;\n    }\n\n    ul {\n        list-style-type: none;\n        padding: 0;\n    }\n\n    li {background-color: #328CC1;\n        display: inline-block;\n        width: 300px;\n        min-height: 300px;\n        border: solid 1px #e8e8e8;\n        padding: 10px;\n        margin: 5px;\n    }\n    .rlink-style {\n        color: red\n    }\n    .weatherSummary {\n        display: inline-block;\n        width: 100px;\n    }\n\n    a {\n        color: #42b983;\n    }\n</style>\n\n\n","<template>\n  <div>\n    <h2>Current Weather <span v-if=\"weatherData\"> for {{ weatherData.name }}, {{weatherData.sys.country }}</span></h2>\n    <p>\n      <router-link to=\"/\">Home</router-link> |\n      <router-link v-bind:to=\"{ name: 'Forecast', params: { cityId: $route.params.cityId } }\">View 5-Day Forecast</router-link>\n    </p>\n    <div v-if=\"weatherData && errors.length===0\">\n      <weather-summary v-bind:weatherData=\"weatherData.weather\"></weather-summary>\n      <weather-conditions v-bind:conditions=\"weatherData.main\"></weather-conditions>\n    </div>\n    <error-list v-bind:errorList=\"errors\"></error-list>\n  </div>\n</template>\n\n<script>\n\nimport {API} from '@/common/api';\nimport WeatherSummary from '@/components/WeatherSummary';\nimport WeatherConditions from '@/components/WeatherConditions';\nimport ErrorList from '@/components/ErrorList';\n\nexport default {\n  name: 'CurrentWeather',\n  data () {\n    return {\n      weatherData: null,\n      errors: [],\n      query: ''\n    }\n  },\n  created () {\n      API.get('weather', {\n        params: {\n            id: this.$route.params.cityId\n        }\n      })\n    .then(response => {\n      this.weatherData = response.data\n    })\n    .catch(error => {\n      this.errors.push(error)\n    });\n  },\n  components: {\n    'weather-summary': WeatherSummary,\n    'weather-conditions': WeatherConditions, \n    'error-list': ErrorList\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.errors li {\n  color: red;\n  border: solid red 1px;\n  padding: 5px;\n}\nh1, h2 {\n  font-weight: normal;\n}\n\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  width: 300px;\n  min-height: 300px;\n  border: solid 1px #e8e8e8;\n  padding: 10px;\n}\n.weatherSummary {\n  display: inline-block;\n  width: 100px;\n}\n\na {\n  color: #42b983;\n}\n</style>\n\n\n","<template>\n    <div>\n\n        <h2>Seattle high and low temperature by month in 2018</h2>\n\n        <ul class=\"results\" v-if=\"results\">\n            <li v-for=\"(result,index) in tmax\" :key=\"index\">\n                <p>Month: {{Months[index]}}</p>\n                <p></p>\n                <p>High Temperature: {{tmax[index]}}&deg;F</p>\n                <p>Low Temperature: {{tmin[index]}}&deg;F</p>\n\n            </li>\n        </ul>\n        <div v-if=\"errors.length > 0\">\n            <h2>There was an error fetching weather data.</h2>\n            <ul class=\"errors\">\n                <li v-for=\"(error,index) in errors\" :key=\"index\">{{ error }}</li>\n            </ul>\n            <error-list v-bind:errorList=\"errors\"></error-list>\n        </div>\n        <p>\n            <router-link class=\"rlink-style\" v-bind:to=\"{name:'Charts'}\">View charts</router-link>\n        </p>\n    </div>\n</template>\n\n<script>\n    import axios from 'axios';\n    import ErrorList from '@/components/ErrorList';\n\n\n\n    export default {\n        name: 'Seattle',\n        data() {\n            return {\n                chartdata: {\n                    labels: ['High Temperature'],\n                    datasets: []\n                },\n                options: {\n\n                },\n                tmax: [],\n                tmin: [],\n                results: null,\n                errors: [],\n                Months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n            }\n        },\n\n        created() {\n            axios.get('https://www.ncdc.noaa.gov/cdo-web/api/v2/data', {\n                headers: {\n                    token: 'AlOCstuxmDrmZEVMyzYRHkJtzIOjDLBD',\n                },\n                params: {\n                    stationid: \"GHCND:USW00024233\",\n                    units: \"standard\",\n                    datatypeid: \"EMXT\",\n                    limit: 100,\n                    startdate: \"2018-01-01\",\n                    enddate: \"2018-12-31\",\n                    datasetid: \"GSOM\"\n                }\n            })\n                .then(response => {\n                    this.results = response.data.results\n                    this.tmax = this.results.map(result => result.value)\n                })\n                .catch(error => {\n                    this.errors.push(error)\n                });\n            axios.get('https://www.ncdc.noaa.gov/cdo-web/api/v2/data', {\n                headers: {\n                    token: 'AlOCstuxmDrmZEVMyzYRHkJtzIOjDLBD',\n                },\n                params: {\n                    stationid: \"GHCND:USW00024233\",\n                    units: \"standard\",\n                    datatypeid: \"EMNT\",\n                    limit: 100,\n                    startdate: \"2018-01-01\",\n                    enddate: \"2018-12-31\",\n                    datasetid: \"GSOM\"\n                }\n            })\n                .then(response => {\n                    this.results = response.data.results\n                    this.tmin = this.results.map(result => result.value)\n\n                })\n                .catch(error => {\n                    this.errors.push(error)\n                });\n        },\n        components: {\n            'error-list': ErrorList,\n\n        }\n    }\n</script>\n\n<style scoped>\n    .errors li {\n        color: red;\n        border: solid red 1px;\n        padding: 5px;\n    }\n\n    h1, h2 {\n        font-weight: normal;\n        font-size: medium;\n    }\n\n    ul {\n        list-style-type: none;\n        padding: 0;\n    }\n\n    li {\n        display: inline-block;\n        background-color: lightblue;\n        width: 200px;\n        min-height: 200px;\n        border: solid 1px #e8e8e8;\n        padding: 10px;\n        margin: 5px;\n    }\n\n    a {\n        color: #42b983;\n    }\n</style>"]}