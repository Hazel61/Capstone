{"version":3,"sources":["webpack:///src/src/App.vue","app.f1936924.css","webpack:///src/components/src/components/WeatherSummary.vue","webpack:///src/components/src/components/WeatherConditions.vue","webpack:///src/views/src/views/Forecast.vue","webpack:///src/views/src/views/CitySearch.vue","webpack:///src/views/src/views/CurrentWeather.vue","webpack:///src/views/src/views/Seattle.vue"],"names":[],"mappings":"AAcA,KACA,6CAAA,CACA,kCAAA,CACA,iCAAA,CACA,aAAA,CACA,eAAA,CACA,YCZA,CDcA,KACA,eAAA,CACA,SAAA,CACA,QCZA,CDcA,KACA,SAAA,CACA,aAAA,CACA,SAAA,CACA,eCZA,CCKA,iCACA,oBAAA,CACA,WDkBA,CEXA,oBACA,WAAA,CACA,kBFeA,CEbA,oBACA,UAAA,CACA,UAAA,CACA,WAAA,CACA,gBAAA,CACA,eAAA,CACA,UAAA,CACA,WFeA,CEbA,oBACA,cAAA,CACA,kBFeA,CEbA,0BACA,WFeA,CGcA,wDACA,SAAA,CACA,oBAAA,CACA,WHHA,CGKA,wCACA,eHHA,CGMA,oBACA,oBAAA,CACA,SHJA,CGMA,oBACA,oBAAA,CACA,WAAA,CACA,gBAAA,CACA,wBAAA,CACA,YAAA,CACA,UHJA,CGOA,mBACA,aHLA,CGOA,iCACA,oBAAA,CACA,WHLA,CIjCA,oBACA,UJqCA,CInCA,4BACA,SAAA,CACA,oBAAA,CACA,WJqCA,CIlCA,wCACA,eJoCA,CIjCA,oBACA,oBAAA,CACA,SJmCA,CIhCA,oBACA,oBAAA,CACA,WAAA,CACA,gBAAA,CACA,wBAAA,CACA,YAAA,CACA,UJkCA,CI/BA,iCACA,oBAAA,CACA,WJiCA,CI9BA,mBACA,aJgCA,CKhFA,4BACA,SAAA,CACA,oBAAA,CACA,WLoFA,CKlFA,wCACA,eLoFA,CKjFA,oBACA,oBAAA,CACA,SLmFA,CKjFA,oBACA,oBAAA,CACA,WAAA,CACA,gBAAA,CACA,wBAAA,CACA,YLmFA,CKjFA,iCACA,oBAAA,CACA,WLmFA,CKhFA,mBACA,aLkFA,CMvFA,4BACA,SAAA,CACA,oBAAA,CACA,WN2FA,CMxFA,wCACA,eAAA,CACA,gBN0FA,CMvFA,oBACA,oBAAA,CACA,SNyFA,CMtFA,oBACA,oBAAA,CACA,wBAAA,CACA,WAAA,CACA,gBAAA,CACA,wBAAA,CACA,YAAA,CACA,UNwFA,CMrFA,mBACA,aNuFA","file":"app.f1936924.css","sourcesContent":["<template>\n  <div id=\"app\">\n    <h1>Climate Change in Seattle</h1>\n    <router-view/>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'app'\n}\n</script>\n\n<style>\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  color: #2c3e50;\n  margin-top: 60px;\n  padding: 20px;\n}\nhtml {\n  background: #666;\n  padding: 0;\n  margin: 0;\n}\nbody {\n  width: 75%;\n  margin: 0 auto;\n  padding: 0;\n  background: #fff;\n}\n/* dl {\n  padding: 5px;\n  background: #e8e8e8;\n}\ndt {\n  float: left;\n  clear: left;\n  width: 120px;\n  text-align: right;\n  font-weight: bold;\n  color: blue;\n}\ndd {\n  margin: 0 0 0 130px;\n  padding: 0 0 0.5em 0;\n}\ndt::after {\n  content: \":\";\n} */\n</style>\n","\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  color: #2c3e50;\n  margin-top: 60px;\n  padding: 20px;\n}\nhtml {\n  background: #666;\n  padding: 0;\n  margin: 0;\n}\nbody {\n  width: 75%;\n  margin: 0 auto;\n  padding: 0;\n  background: #fff;\n}\n/* dl {\n  padding: 5px;\n  background: #e8e8e8;\n}\ndt {\n  float: left;\n  clear: left;\n  width: 120px;\n  text-align: right;\n  font-weight: bold;\n  color: blue;\n}\ndd {\n  margin: 0 0 0 130px;\n  padding: 0 0 0.5em 0;\n}\ndt::after {\n  content: \":\";\n} */\n\n\n.weatherSummary[data-v-59b69fe0] {\n  display: inline-block;\n  width: 100px;\n}\n\n\ndl[data-v-b1efee94] {\n  padding: 5px;\n  background: #e8e8e8;\n}\ndt[data-v-b1efee94] {\n  float: left;\n  clear: left;\n  width: 120px;\n  text-align: right;\n  font-weight: bold;\n  color: blue;\n  padding: 5px;\n}\ndd[data-v-b1efee94] {\n  margin-top: 5px;\n  padding: 0 0 0.5em 0;\n}\ndt[data-v-b1efee94]::after {\n  content: \":\";\n}\n\n\n.errors li[data-v-185c91aa] {\n  color: red;\n  border: solid red 1px;\n  padding: 5px;\n}\n\n\n.errors li[data-v-45f344f8] {\n  color: red;\n  border: solid red 1px;\n  padding: 5px;\n}\nh1[data-v-45f344f8], h2[data-v-45f344f8] {\n  font-weight: normal;\n}\nul[data-v-45f344f8] {\n  list-style-type: none;\n  padding: 0;\n}\nli[data-v-45f344f8] {\n  display: inline-block;\n  width: 200px;\n  min-height: 300px;\n  border: solid 1px #e8e8e8;\n  padding: 10px;\n  margin: 5px;\n}\na[data-v-45f344f8] {\n  color: #42b983;\n}\n.weatherSummary[data-v-45f344f8] {\n  display: inline-block;\n  width: 100px;\n}\n\n\nh2[data-v-0f2e283b] {\n    color: blue;\n}\n.errors li[data-v-0f2e283b] {\n    color: red;\n    border: solid red 1px;\n    padding: 5px;\n}\nh1[data-v-0f2e283b], h2[data-v-0f2e283b] {\n    font-weight: normal;\n}\nul[data-v-0f2e283b] {\n    list-style-type: none;\n    padding: 0;\n}\nli[data-v-0f2e283b] {\n    display: inline-block;\n    width: 300px;\n    min-height: 300px;\n    border: solid 1px #e8e8e8;\n    padding: 10px;\n    margin: 5px;\n}\n.weatherSummary[data-v-0f2e283b] {\n    display: inline-block;\n    width: 100px;\n}\na[data-v-0f2e283b] {\n    color: #42b983;\n}\n\n\n.errors li[data-v-beb4c0f4] {\n  color: red;\n  border: solid red 1px;\n  padding: 5px;\n}\nh1[data-v-beb4c0f4], h2[data-v-beb4c0f4] {\n  font-weight: normal;\n}\nul[data-v-beb4c0f4] {\n  list-style-type: none;\n  padding: 0;\n}\nli[data-v-beb4c0f4] {\n  display: inline-block;\n  width: 300px;\n  min-height: 300px;\n  border: solid 1px #e8e8e8;\n  padding: 10px;\n}\n.weatherSummary[data-v-beb4c0f4] {\n  display: inline-block;\n  width: 100px;\n}\na[data-v-beb4c0f4] {\n  color: #42b983;\n}\n\n\n.errors li[data-v-1e143012] {\n    color: red;\n    border: solid red 1px;\n    padding: 5px;\n}\nh1[data-v-1e143012], h2[data-v-1e143012] {\n    font-weight: normal;\n    font-size: medium;\n}\nul[data-v-1e143012] {\n    list-style-type: none;\n    padding: 0;\n}\nli[data-v-1e143012] {\n    display: inline-block;\n    background-color: lightblue;\n    width: 300px;\n    min-height: 300px;\n    border: solid 1px #e8e8e8;\n    padding: 10px;\n    margin: 5px;\n}\na[data-v-1e143012] {\n    color: #42b983;\n}\n\n\n/*# sourceMappingURL=app.f1936924.css.map*/","<template>\n  <div>\n    <div v-for=\"weatherSummary in weatherData\" class=\"weatherSummary\" :key=\"weatherSummary.id\">\n      <img v-bind:src=\"'http://openweathermap.org/img/w/' + weatherSummary.icon + '.png'\" v-bind:alt=\"weatherSummary.main\">\n      <br>\n      <b>{{ weatherSummary.main }}</b>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'WeatherSummary',\n  data () {\n    return {\n    }\n  },\n  props: {\n    weatherData: {}\n  }\n}\n</script>\n\n<style scoped>\n  .weatherSummary {\n    display: inline-block;\n    width: 100px;\n  }\n</style>","<template>\n  <div>\n    <dl>\n       <dt>Current Temp</dt>\n       <dd>{{ conditions.temp }}&deg;F</dd>\n      <dt>High</dt>\n      <dd>{{ conditions.temp_min }}&deg;F</dd>\n      <dt>Low </dt>\n      <dd>{{ conditions.temp_max }}&deg;F</dd>\n      <dt>Humidity </dt>\n      <dd>{{ conditions.humidity }}%</dd>\n      <dt>Pressure</dt>\n      <dd>{{conditions.pressure}}</dd>\n\n    </dl>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'WeatherConditions',\n  data () {\n    return {\n\n    }\n  },\n  props: {\n    conditions: {}\n  }\n}\n</script>\n\n<style scoped>\n  dl {\n    padding: 5px;\n    background: #e8e8e8;\n  }\n  dt {\n    float: left;\n    clear: left;\n    width: 120px;\n    text-align: right;\n    font-weight: bold;\n    color: blue;\n    padding: 5px;\n  }\n  dd {\n    margin-top: 5px;\n    padding: 0 0 0.5em 0;\n  }\n  dt::after {\n    content: \":\";\n  }\n</style>","<template>\n  <div>\n    <h2>Five Day Hourly Forecast <span v-if=\"weatherData\"> for {{ weatherData.city.name }}, {{weatherData.city.country }}</span></h2>\n    <p>\n      <router-link to=\"/\">Home</router-link> |\n      <router-link v-bind:to=\"{ name: 'CurrentWeather', params: { cityId: $route.params.cityId } }\">Current Weather <span v-if=\"weatherData\"> for {{ weatherData.city.name }}, {{weatherData.city.country }}</span></router-link>\n    </p>\n    <ul v-if=\"weatherData && errors.length===0\" class=\"forecast\">\n      <li v-for=\"(forecast,index) in weatherData.list\" :key=\"index\">\n        <h3>{{ forecast.dt|formatDate }}</h3>\n        <weather-summary v-bind:weatherData=\"forecast.weather\"></weather-summary>\n        <weather-conditions v-bind:conditions=\"forecast.main\"></weather-conditions>\n      </li>\n    </ul>\n    <error-list v-bind:errorList=\"errors\"></error-list>\n  </div>\n</template>\n\n<script>\n\nimport {API} from '@/common/api';\nimport WeatherSummary from '@/components/WeatherSummary';\nimport WeatherConditions from '@/components/WeatherConditions';\nimport ErrorList from '@/components/ErrorList';\n\nexport default {\n  name: 'Forecast',\n  data () {\n    return {\n      weatherData: null,\n      errors: [],\n      query: ''\n    }\n  },\n  created () {\n      API.get('forecast', {\n        params: {\n            id: this.$route.params.cityId,\n        }\n      })\n    .then(response => {\n      this.weatherData = response.data\n    })\n    .catch(error => {\n      this.errors.push(error)\n    });\n\n  },\n  filters: {\n    formatDate: function (timestamp){\n      let date = new Date(timestamp * 1000);\n      const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n      const weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n      //let weekday = date.getDay();\n      let daynum = date.getDate();\n      let month = date.getMonth();\n      let hour = date.getHours();\n      if (hour === 12) {\n        hour = 'Noon';\n      } else if (hour === 0) {\n        hour = 'Midnight';\n      } else if (hour > 12) {\n        hour = hour - 12 + 'PM';\n      } else if (hour < 12) {\n        hour = hour + 'AM';\n      }\n      //let year = date.getFullYear();\n      return `${ months[month] } ${ daynum } @ ${ hour }`;\n    }\n  },\n  components: {\n    'weather-summary': WeatherSummary,\n    'weather-conditions': WeatherConditions,\n    'error-list': ErrorList\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.errors li {\n  color: red;\n  border: solid red 1px;\n  padding: 5px;\n}\nh1, h2 {\n  font-weight: normal;\n}\n\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  width: 200px;\n  min-height: 300px;\n  border: solid 1px #e8e8e8;\n  padding: 10px;\n  margin: 5px;\n}\n\na {\n  color: #42b983;\n}\n.weatherSummary {\n  display: inline-block;\n  width: 100px;\n}\n</style>\n\n\n","<template>\n    <div>\n        <h2>Welcome to my Seattle temperature tracker.</h2>\n        <p>I have lived in Seattle for most of my life, and I know the city is warming up. I thought it would be interesting to dive into\n        NOAA's and Open Weather Map's API's and look at some historical data on the city. Click below to see the current  </p>\n\n            <p>\n                <button v-on:click=\"getCities\" type=\"submit\">Current Weather</button>\n            </p>\n\n            <ul class=\"cities\" v-if=\"results && results.list.length > 0\">\n            <li v-for=\"(city,index) in results.list\" :key=\"index\">\n                <h2>{{ city.name }}, {{ city.sys.country }}</h2>\n\n                <weather-summary v-bind:weatherData=\"city.weather\"></weather-summary>\n                <weather-conditions v-bind:conditions=\"city.main\"></weather-conditions>\n            </li>\n        </ul>\n\n            <p>\n                <router-link v-bind:to=\"{name:'Seattle'}\">Request High temperatures</router-link>\n            </p>\n\n        <error-list v-bind:errorList=\"errors\"></error-list>\n    </div>\n</template>\n\n<script>\n    import {API} from '@/common/api';\n    // import {API} from '@/common/api2'\n    import ErrorList from '@/components/ErrorList';\n    import WeatherSummary from '@/components/WeatherSummary';\n    import WeatherConditions from '@/components/WeatherConditions';\n\n\n    export default {\n        name: 'CitySearch',\n        data() {\n            return {\n                results: null,\n                errors: [],\n                query: 'Seattle'\n            }\n        },\n        methods: {\n            getCities: function () {\n                API.get('find', {\n                    params: {\n                        q: this.query\n                    }\n                })\n                .then(response => {\n                    this.results = response.data\n                })\n                .catch(error => {\n                    this.errors.push(error)\n                });\n            }\n        },\n        components: {\n            'weather-summary': WeatherSummary,\n            'weather-conditions': WeatherConditions,\n            'error-list': ErrorList\n        }\n    }\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n    h2 {\n        color: blue;\n    }\n    .errors li {\n        color: red;\n        border: solid red 1px;\n        padding: 5px;\n    }\n\n    h1, h2 {\n        font-weight: normal;\n    }\n\n    ul {\n        list-style-type: none;\n        padding: 0;\n    }\n\n    li {\n        display: inline-block;\n        width: 300px;\n        min-height: 300px;\n        border: solid 1px #e8e8e8;\n        padding: 10px;\n        margin: 5px;\n    }\n\n    .weatherSummary {\n        display: inline-block;\n        width: 100px;\n    }\n\n    a {\n        color: #42b983;\n    }\n</style>\n\n\n","<template>\n  <div>\n    <h2>Current Weather <span v-if=\"weatherData\"> for {{ weatherData.name }}, {{weatherData.sys.country }}</span></h2>\n    <p>\n      <router-link to=\"/\">Home</router-link> |\n      <router-link v-bind:to=\"{ name: 'Forecast', params: { cityId: $route.params.cityId } }\">View 5-Day Forecast</router-link>\n    </p>\n    <div v-if=\"weatherData && errors.length===0\">\n      <weather-summary v-bind:weatherData=\"weatherData.weather\"></weather-summary>\n      <weather-conditions v-bind:conditions=\"weatherData.main\"></weather-conditions>\n    </div>\n    <error-list v-bind:errorList=\"errors\"></error-list>\n  </div>\n</template>\n\n<script>\n\nimport {API} from '@/common/api';\nimport WeatherSummary from '@/components/WeatherSummary';\nimport WeatherConditions from '@/components/WeatherConditions';\nimport ErrorList from '@/components/ErrorList';\n\nexport default {\n  name: 'CurrentWeather',\n  data () {\n    return {\n      weatherData: null,\n      errors: [],\n      query: ''\n    }\n  },\n  created () {\n      API.get('weather', {\n        params: {\n            id: this.$route.params.cityId\n        }\n      })\n    .then(response => {\n      this.weatherData = response.data\n    })\n    .catch(error => {\n      this.errors.push(error)\n    });\n  },\n  components: {\n    'weather-summary': WeatherSummary,\n    'weather-conditions': WeatherConditions, \n    'error-list': ErrorList\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.errors li {\n  color: red;\n  border: solid red 1px;\n  padding: 5px;\n}\nh1, h2 {\n  font-weight: normal;\n}\n\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  width: 300px;\n  min-height: 300px;\n  border: solid 1px #e8e8e8;\n  padding: 10px;\n}\n.weatherSummary {\n  display: inline-block;\n  width: 100px;\n}\n\na {\n  color: #42b983;\n}\n</style>\n\n\n","<template>\n    <div>\n\n        <h2>Seattle: high temperature by month in 2018</h2>\n\n        <ul class=\"results\" v-if=\"results\">\n            <li v-for=\"(result,index) in results\" :key=\"index\">\n                <p>Month: {{Months[(new Date(result.date)).getMonth()]}}</p>\n                <p></p>\n                <p>High Temperature: {{result.value}}&deg;F</p>\n\n            </li>\n        </ul>\n        <div v-if=\"errors.length > 0\">\n            <h2>There was an error fetching weather data.</h2>\n            <ul class=\"errors\">\n                <li v-for=\"(error,index) in errors\" :key=\"index\">{{ error }}</li>\n            </ul>\n            <error-list v-bind:errorList=\"errors\"></error-list>\n        </div>\n    </div>\n</template>\n\n<script>\n    import axios from 'axios';\n    import ErrorList from '@/components/ErrorList';\n\n\n    export default {\n        name: 'Seattle',\n        data() {\n            return {\n              tmax: [],\n              results: null,\n              errors: [],\n              Months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n            }\n        },\n        computed:\n        {\n\n        },\n        created() {\n            axios.get('https://www.ncdc.noaa.gov/cdo-web/api/v2/data', {\n                headers: {\n                    token: 'AlOCstuxmDrmZEVMyzYRHkJtzIOjDLBD',\n                },\n                params: {\n                    stationid: \"GHCND:USW00024233\",\n                    units: \"standard\",\n                    datatypeid: \"TMAX\",\n\n                    limit: 100,\n                    startdate: \"2018-01-01\",\n                    enddate: \"2018-12-31\",\n                    datasetid: \"GSOM\"\n                }\n            })\n                .then(response => {\n                    this.results = response.data.results\n                    // this.tmax = this.results.filter(result => results.datatype===\"TMAX\")\n                    // this.tmin = this.results.filter(result => result.datatype===\"TMIN\")\n                })\n                .catch(error => {\n                    this.errors.push(error)\n                });\n        },\n        components: {\n            'error-list': ErrorList\n\n        }\n    }\n</script>\n\n<style scoped>\n    .errors li {\n        color: red;\n        border: solid red 1px;\n        padding: 5px;\n    }\n\n    h1, h2 {\n        font-weight: normal;\n        font-size: medium;\n    }\n\n    ul {\n        list-style-type: none;\n        padding: 0;\n    }\n\n    li {\n        display: inline-block;\n        background-color: lightblue;\n        width: 300px;\n        min-height: 300px;\n        border: solid 1px #e8e8e8;\n        padding: 10px;\n        margin: 5px;\n    }\n\n    a {\n        color: #42b983;\n    }\n</style>"]}